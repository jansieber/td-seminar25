function varargout=sym_LangKobayashi(action,varargin)
%% Automatically generated with matlabFunction
% 
%#ok<*DEFNU,*INUSD,*INUSL>

switch action
  case 'ntau'
   varargout{1}=1;
   return
  case 'npar'
   varargout{1}=6;
   return
  case 'nf'
   varargout{1}=3;
   return
  case 'nx'
   varargout{1}=3;
   return
  case 'tp_del'
   varargout{1}=0;
   return
  case 'maxorder'
   varargout{1}=2;
   return
  case 'iscollected'
   varargout{1}=0;
   return
  case 'directional_derivative'
   varargout{1}=1;
   return
  case 'sys_tau_seq'
   varargout{1}={};
   return
  case 'sys_tau_in'
   varargout{1}=[];
   return
  case 'xpattern'
   varargout{1}=[1  1  2  1  3  1  1  2  2  2];
   return
end
ind=varargin{1};
order=varargin{2};
nout=varargin{3};
f=str2func(sprintf('sym_LangKobayashi_%s_%d_%d',action,ind,order));
varargout=cell(nout,1);
[varargout{:}]=f(varargin{4:end});
end



function [out_1,out_2,out_3] = sym_LangKobayashi_rhs_1_0(in1,in2,in3,in4)
%sym_LangKobayashi_rhs_1_0
%    [OUT_1,OUT_2,OUT_3] = sym_LangKobayashi_rhs_1_0(IN1,IN2,IN3,IN4)

%    This function was generated by the Symbolic Math Toolbox version 24.1.
%    03-Feb-2025 23:15:09

in_1_n1 = in1(:,1);
in_1_n2 = in1(:,2);
in_1_n3 = in1(:,3);
in_1_n4 = in1(:,4);
in_1_n5 = in1(:,5);
in_2_n1 = in2(:,1);
in_2_n2 = in2(:,2);
in_2_n3 = in2(:,3);
in_2_n5 = in2(:,5);
in_2_n6 = in2(:,6);
t2 = cos(in_2_n3);
t3 = sin(in_2_n3);
out_1 = in_1_n1.*in_1_n3-in_1_n2.*in_1_n3.*in_2_n5+in_1_n4.*in_2_n2.*t2-in_1_n5.*in_2_n2.*t3;
if nargout > 1
    out_2 = in_1_n2.*in_1_n3+in_1_n1.*in_1_n3.*in_2_n5+in_1_n4.*in_2_n2.*t3+in_1_n5.*in_2_n2.*t2;
end
if nargout > 2
    t4 = in_1_n1.^2;
    t5 = in_1_n2.^2;
    out_3 = -in_2_n6.*(in_1_n3-in_2_n1+t4+t5+in_1_n3.*t4.*2.0+in_1_n3.*t5.*2.0);
end
end


function [out_1,out_2,out_3] = sym_LangKobayashi_rhs_1_1(in1,in2,in3,in4)
%sym_LangKobayashi_rhs_1_1
%    [OUT_1,OUT_2,OUT_3] = sym_LangKobayashi_rhs_1_1(IN1,IN2,IN3,IN4)

%    This function was generated by the Symbolic Math Toolbox version 24.1.
%    03-Feb-2025 23:15:09

in_1_n1 = in1(:,1);
in_1_n2 = in1(:,2);
in_1_n3 = in1(:,3);
in_1_n4 = in1(:,4);
in_1_n5 = in1(:,5);
in_2_n1 = in2(:,1);
in_2_n2 = in2(:,2);
in_2_n3 = in2(:,3);
in_2_n5 = in2(:,5);
in_2_n6 = in2(:,6);
in_3_n1 = in3(:,1);
in_3_n2 = in3(:,2);
in_3_n3 = in3(:,3);
in_3_n4 = in3(:,4);
in_3_n5 = in3(:,5);
in_4_n1 = in4(:,1);
in_4_n2 = in4(:,2);
in_4_n3 = in4(:,3);
in_4_n5 = in4(:,5);
in_4_n6 = in4(:,6);
t2 = cos(in_2_n3);
t3 = sin(in_2_n3);
out_1 = in_1_n1.*in_3_n3+in_1_n3.*in_3_n1-in_1_n2.*in_1_n3.*in_4_n5-in_1_n2.*in_2_n5.*in_3_n3-in_1_n3.*in_2_n5.*in_3_n2+in_1_n4.*in_4_n2.*t2+in_2_n2.*in_3_n4.*t2-in_1_n5.*in_4_n2.*t3-in_2_n2.*in_3_n5.*t3-in_1_n4.*in_2_n2.*in_4_n3.*t3-in_1_n5.*in_2_n2.*in_4_n3.*t2;
if nargout > 1
    out_2 = in_1_n2.*in_3_n3+in_1_n3.*in_3_n2+in_1_n1.*in_1_n3.*in_4_n5+in_1_n1.*in_2_n5.*in_3_n3+in_1_n3.*in_2_n5.*in_3_n1+in_1_n4.*in_4_n2.*t3+in_1_n5.*in_4_n2.*t2+in_2_n2.*in_3_n4.*t3+in_2_n2.*in_3_n5.*t2+in_1_n4.*in_2_n2.*in_4_n3.*t2-in_1_n5.*in_2_n2.*in_4_n3.*t3;
end
if nargout > 2
    t4 = in_1_n1.^2;
    t5 = in_1_n2.^2;
    out_3 = -in_2_n6.*(in_3_n3-in_4_n1+in_1_n1.*in_3_n1.*2.0+in_1_n2.*in_3_n2.*2.0+in_3_n3.*t4.*2.0+in_3_n3.*t5.*2.0+in_1_n1.*in_1_n3.*in_3_n1.*4.0+in_1_n2.*in_1_n3.*in_3_n2.*4.0)-in_4_n6.*(in_1_n3-in_2_n1+t4+t5+in_1_n3.*t4.*2.0+in_1_n3.*t5.*2.0);
end
end


function [out_1,out_2,out_3] = sym_LangKobayashi_rhs_1_2(in1,in2,in3,in4)
%sym_LangKobayashi_rhs_1_2
%    [OUT_1,OUT_2,OUT_3] = sym_LangKobayashi_rhs_1_2(IN1,IN2,IN3,IN4)

%    This function was generated by the Symbolic Math Toolbox version 24.1.
%    03-Feb-2025 23:15:09

in_1_n1 = in1(:,1);
in_1_n2 = in1(:,2);
in_1_n3 = in1(:,3);
in_1_n4 = in1(:,4);
in_1_n5 = in1(:,5);
in_2_n2 = in2(:,2);
in_2_n3 = in2(:,3);
in_2_n5 = in2(:,5);
in_2_n6 = in2(:,6);
in_3_n1 = in3(:,1);
in_3_n2 = in3(:,2);
in_3_n3 = in3(:,3);
in_3_n4 = in3(:,4);
in_3_n5 = in3(:,5);
in_4_n1 = in4(:,1);
in_4_n2 = in4(:,2);
in_4_n3 = in4(:,3);
in_4_n5 = in4(:,5);
in_4_n6 = in4(:,6);
t2 = cos(in_2_n3);
t3 = sin(in_2_n3);
t4 = in_3_n1.^2;
t5 = in_3_n2.^2;
t6 = in_4_n3.^2;
out_1 = in_3_n1.*in_3_n3.*2.0-in_1_n2.*in_3_n3.*in_4_n5.*2.0-in_1_n3.*in_3_n2.*in_4_n5.*2.0-in_2_n5.*in_3_n2.*in_3_n3.*2.0+in_3_n4.*in_4_n2.*t2.*2.0-in_3_n5.*in_4_n2.*t3.*2.0-in_1_n4.*in_4_n2.*in_4_n3.*t3.*2.0-in_1_n5.*in_4_n2.*in_4_n3.*t2.*2.0-in_2_n2.*in_3_n4.*in_4_n3.*t3.*2.0-in_2_n2.*in_3_n5.*in_4_n3.*t2.*2.0-in_1_n4.*in_2_n2.*t2.*t6+in_1_n5.*in_2_n2.*t3.*t6;
if nargout > 1
    out_2 = in_3_n2.*in_3_n3.*2.0+in_1_n1.*in_3_n3.*in_4_n5.*2.0+in_1_n3.*in_3_n1.*in_4_n5.*2.0+in_2_n5.*in_3_n1.*in_3_n3.*2.0+in_3_n4.*in_4_n2.*t3.*2.0+in_3_n5.*in_4_n2.*t2.*2.0+in_1_n4.*in_4_n2.*in_4_n3.*t2.*2.0+in_2_n2.*in_3_n4.*in_4_n3.*t2.*2.0-in_1_n5.*in_4_n2.*in_4_n3.*t3.*2.0-in_2_n2.*in_3_n5.*in_4_n3.*t3.*2.0-in_1_n4.*in_2_n2.*t3.*t6-in_1_n5.*in_2_n2.*t2.*t6;
end
if nargout > 2
    out_3 = in_4_n6.*(in_3_n3-in_4_n1+in_1_n1.*in_3_n1.*2.0+in_1_n2.*in_3_n2.*2.0+in_1_n1.^2.*in_3_n3.*2.0+in_1_n2.^2.*in_3_n3.*2.0+in_1_n1.*in_1_n3.*in_3_n1.*4.0+in_1_n2.*in_1_n3.*in_3_n2.*4.0).*-2.0-in_2_n6.*(t4.*2.0+t5.*2.0+in_1_n3.*t4.*4.0+in_1_n3.*t5.*4.0+in_1_n1.*in_3_n1.*in_3_n3.*8.0+in_1_n2.*in_3_n2.*in_3_n3.*8.0);
end
end

